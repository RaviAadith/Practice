




using System;
using System.Collections.Generic;
using System.Linq;

public class Program
{
    public static void Main()
    {
        // Sample data
        var requests = new List<Request>
        {
            new Request { ReqId = 1, GrantorMail = "grantor1@example.com", GranteeMail = "grantee1@example.com", ReqDetails = "Request 1 Details", ReqEndDate = DateTime.Now.AddDays(5) },
            new Request { ReqId = 2, GrantorMail = "grantor1@example.com", GranteeMail = "grantee2@example.com", ReqDetails = "Request 2 Details", ReqEndDate = DateTime.Now.AddDays(10) },
            new Request { ReqId = 3, GrantorMail = "grantor2@example.com", GranteeMail = "grantee1@example.com", ReqDetails = "Request 3 Details", ReqEndDate = DateTime.Now.AddDays(15) }
        };

        ConsolidateAndSendEmailsUsingDictionaries(requests);
    }

    public static void ConsolidateAndSendEmailsUsingDictionaries(List<Request> requests)
    {
        // Dictionary for grantors
        var grantorDictionary = new Dictionary<string, List<int>>();
        // Dictionary for grantees
        var granteeDictionary = new Dictionary<string, List<int>>();

        // Populate dictionaries
        foreach (var request in requests)
        {
            // Check and group by GrantorMail
            if (!string.IsNullOrEmpty(request.GrantorMail))
            {
                if (!grantorDictionary.ContainsKey(request.GrantorMail))
                {
                    grantorDictionary[request.GrantorMail] = new List<int>();
                }
                grantorDictionary[request.GrantorMail].Add(request.ReqId);
            }

            // Check and group by GranteeMail
            if (!string.IsNullOrEmpty(request.GranteeMail))
            {
                if (!granteeDictionary.ContainsKey(request.GranteeMail))
                {
                    granteeDictionary[request.GranteeMail] = new List<int>();
                }
                granteeDictionary[request.GranteeMail].Add(request.ReqId);
            }
        }

        // Send emails to grantors
        if (grantorDictionary.Any())
        {
            foreach (var grantor in grantorDictionary)
            {
                if (grantor.Value.Any()) // Ensure there are requests for this grantor
                {
                    var emailBody = $"Dear {grantor.Key},\n\nHere are the request IDs where you are the grantor:\n";
                    emailBody += string.Join(", ", grantor.Value);
                    SendEmail(grantor.Key, "Your Consolidated Request IDs as Grantor", emailBody);
                }
            }
        }

        // Send emails to grantees
        if (granteeDictionary.Any())
        {
            foreach (var grantee in granteeDictionary)
            {
                if (grantee.Value.Any()) // Ensure there are requests for this grantee
                {
                    var emailBody = $"Dear {grantee.Key},\n\nHere are the request IDs where you are the grantee:\n";
                    emailBody += string.Join(", ", grantee.Value);
                    SendEmail(grantee.Key, "Your Consolidated Request IDs as Grantee", emailBody);
                }
            }
        }
    }

    // Mock email sender function
    public static void SendEmail(string recipient, string subject, string body)
    {
        Console.WriteLine($"Sending email to: {recipient}");
        Console.WriteLine($"Subject: {subject}");
        Console.WriteLine($"Body:\n{body}");
    }
}

// Request class to represent the data model
public class Request
{
    public int ReqId { get; set; }
    public string GrantorMail { get; set; }
    public string GranteeMail { get; set; }
    public string ReqDetails { get; set; }
    public DateTime ReqEndDate { get; set; }
}
